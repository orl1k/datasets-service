version: '3.8'

services:

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:3
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: on-failure

  redis:
    container_name: redis                                                            
    image: redis:6-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    
  app:
    container_name: app
    hostname: app
    build: ./project
    entrypoint: uvicorn main:app --host 0.0.0.0 --reload --port 8000
    depends_on:
      - rabbitmq
    ports:
      - 8000:8000
    volumes:
      - ./project:/home/datasets-api
    environment:
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: on-failure

  celery:
    container_name: celery
    hostname: celery
    build: ./project
    volumes:
      - ./project:/home/datasets-api
    command: celery worker -c 1 --app=worker.celery --loglevel=info --logfile=logs/celery.log
    environment:
      - CELERY_BROKER_URL=amqp://rabbitmq:5672
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    deploy:
      restart_policy:
        condition: on-failure
      # resources:
      #   limits:
      #     cpus: '0.50'
      #     memory: 50M
      #   reservations:
      #     cpus: '0.25'
      #     memory: 20M
    depends_on:
      - rabbitmq
      - redis
    restart: on-failure

  # flower:
  #   container_name: flower
  #   build: ./project
  #   volumes:
  #     - ./project:/home/datasets-api
  #   command: celery --app=worker.celery flower --port=5555 --broker=amqp://rabbitmq:5672
  #   ports:
  #     - 5555:5555
  #   # environment:
  #   #   - CELERY_BROKER_URL="amqp://rabbitmq:5672"
  #   #   - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #   #   - TZ=Europe/Moscow
  #   depends_on:
  #     - app
  #     - rabbitmq
  #     - celery
  #   networks:
  #     - main

volumes:
  redis-data:
  rabbitmq-data:
